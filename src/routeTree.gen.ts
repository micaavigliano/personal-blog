/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LocaleRouteImport } from './routes/$locale'
import { Route as LocaleIndexRouteImport } from './routes/$locale/index'
import { Route as LocaleServicesRouteImport } from './routes/$locale/services'
import { Route as LocaleExperienceRouteImport } from './routes/$locale/experience'
import { Route as LocaleBookRouteImport } from './routes/$locale/book'
import { Route as LocaleBlogIndexRouteImport } from './routes/$locale/blog/index'
import { Route as LocaleBlogSlugRouteImport } from './routes/$locale/blog/$slug'

const LocaleRoute = LocaleRouteImport.update({
  id: '/$locale',
  path: '/$locale',
  getParentRoute: () => rootRouteImport,
} as any)
const LocaleIndexRoute = LocaleIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleServicesRoute = LocaleServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleExperienceRoute = LocaleExperienceRouteImport.update({
  id: '/experience',
  path: '/experience',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleBookRoute = LocaleBookRouteImport.update({
  id: '/book',
  path: '/book',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleBlogIndexRoute = LocaleBlogIndexRouteImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleBlogSlugRoute = LocaleBlogSlugRouteImport.update({
  id: '/blog/$slug',
  path: '/blog/$slug',
  getParentRoute: () => LocaleRoute,
} as any)

export interface FileRoutesByFullPath {
  '/$locale': typeof LocaleRouteWithChildren
  '/$locale/book': typeof LocaleBookRoute
  '/$locale/experience': typeof LocaleExperienceRoute
  '/$locale/services': typeof LocaleServicesRoute
  '/$locale/': typeof LocaleIndexRoute
  '/$locale/blog/$slug': typeof LocaleBlogSlugRoute
  '/$locale/blog': typeof LocaleBlogIndexRoute
}
export interface FileRoutesByTo {
  '/$locale/book': typeof LocaleBookRoute
  '/$locale/experience': typeof LocaleExperienceRoute
  '/$locale/services': typeof LocaleServicesRoute
  '/$locale': typeof LocaleIndexRoute
  '/$locale/blog/$slug': typeof LocaleBlogSlugRoute
  '/$locale/blog': typeof LocaleBlogIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/$locale': typeof LocaleRouteWithChildren
  '/$locale/book': typeof LocaleBookRoute
  '/$locale/experience': typeof LocaleExperienceRoute
  '/$locale/services': typeof LocaleServicesRoute
  '/$locale/': typeof LocaleIndexRoute
  '/$locale/blog/$slug': typeof LocaleBlogSlugRoute
  '/$locale/blog/': typeof LocaleBlogIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/$locale'
    | '/$locale/book'
    | '/$locale/experience'
    | '/$locale/services'
    | '/$locale/'
    | '/$locale/blog/$slug'
    | '/$locale/blog'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/$locale/book'
    | '/$locale/experience'
    | '/$locale/services'
    | '/$locale'
    | '/$locale/blog/$slug'
    | '/$locale/blog'
  id:
    | '__root__'
    | '/$locale'
    | '/$locale/book'
    | '/$locale/experience'
    | '/$locale/services'
    | '/$locale/'
    | '/$locale/blog/$slug'
    | '/$locale/blog/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LocaleRoute: typeof LocaleRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$locale': {
      id: '/$locale'
      path: '/$locale'
      fullPath: '/$locale'
      preLoaderRoute: typeof LocaleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$locale/': {
      id: '/$locale/'
      path: '/'
      fullPath: '/$locale/'
      preLoaderRoute: typeof LocaleIndexRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/services': {
      id: '/$locale/services'
      path: '/services'
      fullPath: '/$locale/services'
      preLoaderRoute: typeof LocaleServicesRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/experience': {
      id: '/$locale/experience'
      path: '/experience'
      fullPath: '/$locale/experience'
      preLoaderRoute: typeof LocaleExperienceRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/book': {
      id: '/$locale/book'
      path: '/book'
      fullPath: '/$locale/book'
      preLoaderRoute: typeof LocaleBookRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/blog/': {
      id: '/$locale/blog/'
      path: '/blog'
      fullPath: '/$locale/blog'
      preLoaderRoute: typeof LocaleBlogIndexRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/blog/$slug': {
      id: '/$locale/blog/$slug'
      path: '/blog/$slug'
      fullPath: '/$locale/blog/$slug'
      preLoaderRoute: typeof LocaleBlogSlugRouteImport
      parentRoute: typeof LocaleRoute
    }
  }
}

interface LocaleRouteChildren {
  LocaleBookRoute: typeof LocaleBookRoute
  LocaleExperienceRoute: typeof LocaleExperienceRoute
  LocaleServicesRoute: typeof LocaleServicesRoute
  LocaleIndexRoute: typeof LocaleIndexRoute
  LocaleBlogSlugRoute: typeof LocaleBlogSlugRoute
  LocaleBlogIndexRoute: typeof LocaleBlogIndexRoute
}

const LocaleRouteChildren: LocaleRouteChildren = {
  LocaleBookRoute: LocaleBookRoute,
  LocaleExperienceRoute: LocaleExperienceRoute,
  LocaleServicesRoute: LocaleServicesRoute,
  LocaleIndexRoute: LocaleIndexRoute,
  LocaleBlogSlugRoute: LocaleBlogSlugRoute,
  LocaleBlogIndexRoute: LocaleBlogIndexRoute,
}

const LocaleRouteWithChildren =
  LocaleRoute._addFileChildren(LocaleRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LocaleRoute: LocaleRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
